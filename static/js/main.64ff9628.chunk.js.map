{"version":3,"sources":["containers/MenuContainer/index.jsx","containers/MapContainer/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["StyledMenu","styled","div","Menu","GoogleApiWrapper","apiKey","googleMapAPI","google","useState","showInfoWindow","activeMarker","selectedPlace","state","setState","name","onClick","props","marker","visible","onClose","GlobalStyle","createGlobalStyle","AppDiv","StyledMap","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iaAKA,IAAMA,EAAaC,IAAOC,IAAV,KAcDC,MARf,WACE,OACE,kBAACH,EAAD,KACE,mE,6PCoDSI,iCAAiB,CAC9BC,OAAQC,KADKF,EAvDf,YAAmC,IAAXG,EAAU,EAAVA,OAAU,EACNC,mBAAS,CACjCC,gBAAgB,EAChBC,aAAc,GACdC,cAAe,KAJe,mBACzBC,EADyB,KAClBC,EADkB,KAQ9BH,EAKEE,EALFF,aACAD,EAIEG,EAJFH,eAT8B,EAa5BG,EAHFD,cACEG,GAX4B,aAY1B,GAZ0B,GAW5BA,KAsBJ,OACE,kBAAC,MAAD,CACEP,OAAQA,GAGR,kBAAC,SAAD,CACEQ,QAxBgB,SAACC,EAAcC,GACnCJ,EAAS,CACPJ,gBAAgB,EAChBC,aAAcO,EACdN,cAAeK,KAqBbF,KAAK,qBAEP,kBAAC,aAAD,CACEG,OAAQP,EACRQ,QAAST,EACTU,QAtBU,WACVV,GACFI,E,yVAAS,CAAD,GACHD,EADG,CAENH,gBAAgB,EAChBC,aAAc,UAmBd,6BACE,4BAAKI,S,87BCnDf,IAAMM,EAAcC,YAAH,KA+BXC,EAASrB,IAAOC,IAAV,KAMNqB,EAAYtB,IAAOC,IAAV,KAmBAsB,EAZH,kBACV,oCACE,kBAACJ,EAAD,MACA,kBAACE,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,KACE,kBAAC,EAAD,UC9CYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.64ff9628.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledMenu = styled.div`\n  width: 20%;\n  display: inline-flex;\n  align-items: center;\n`;\n\nfunction Menu() {\n  return (\n    <StyledMenu>\n      <p>What do you want to put this area?</p>\n    </StyledMenu>\n  );\n}\n\nexport default Menu;\n","// @flow\n\nimport React, { useState } from 'react';\nimport {\n  GoogleApiWrapper, InfoWindow, Marker, Map,\n} from 'google-maps-react';\n\nimport { googleMapAPI } from '../../assets/keys';\n\n// import CurrentLocation from './CurrentLocation';\n\nfunction MapContainer({ google }) {\n  const [state, setState] = useState({\n    showInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {},\n  });\n\n  const {\n    activeMarker,\n    showInfoWindow,\n    selectedPlace: {\n      name,\n    } = {},\n  } = state;\n\n  const onMarkerClick = (props: Props, marker: object) => {\n    setState({\n      showInfoWindow: true,\n      activeMarker: marker,\n      selectedPlace: props,\n    });\n  };\n\n  const onClose = () => {\n    if (showInfoWindow) {\n      setState({\n        ...state,\n        showInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  };\n\n  return (\n    <Map\n      google={google}\n      // centerAroundCurrentLocation\n    >\n      <Marker\n        onClick={onMarkerClick}\n        name=\"Current location\"\n      />\n      <InfoWindow\n        marker={activeMarker}\n        visible={showInfoWindow}\n        onClose={onClose}\n      >\n        <div>\n          <h4>{name}</h4>\n        </div>\n      </InfoWindow>\n    </Map>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: googleMapAPI,\n})(MapContainer);\n","// @flow\n\nimport React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nimport Menu from './containers/MenuContainer';\nimport MapContainer from './containers/MapContainer';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n\n  #root {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n`;\n\nconst AppDiv = styled.div`\n  display: flex;\n  width: 100%;\n  height: 100%;\n`;\n\nconst StyledMap = styled.div`\n  margin: 1rem;\n  position: relative;\n  height: calc(100% - 2rem);\n  width: calc(100% - 2rem);\n`;\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n    <AppDiv>\n      <Menu />\n      <StyledMap>\n        <MapContainer />\n      </StyledMap>\n    </AppDiv>\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}