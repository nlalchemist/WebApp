{"version":3,"sources":["containers/MapContainer/CurrentLocation.jsx","containers/MapContainer/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["mapStyles","map","position","width","height","CurrentLocation","props","loadMap","google","maps","zoom","mapRef","refs","node","ReactDOM","findDOMNode","state","currentLocation","lat","lng","mapConfig","center","LatLng","Map","recenterMap","panTo","renderChildren","children","React","Children","c","cloneElement","mapCenter","initialCenter","this","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setState","prevProps","prevState","style","ref","Component","defaultProps","visible","MapContainer","onMarkerClick","marker","showInfoWindow","activeMarker","selectedPlace","onClose","name","onClick","GoogleApiWrapper","apiKey","googleMapAPI","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39c02657.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n  map: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n  },\n};\n\ntype Props = {\n  zoom?: number,\n  initialCenter?: {\n    lat: number,\n    lng: number,\n  },\n  centerAroundCurrentLocation?: boolean,\n  visible?: boolean,\n  google: any,\n}\n\ntype State = {\n  currentLocation: {\n    lat: number,\n    lng: number,\n  },\n}\n\nexport default class CurrentLocation extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    const {\n      initialCenter: {\n        lat,\n        lng,\n      } = {},\n    } = this.props;\n\n    this.state = {\n      currentLocation: {\n        lat,\n        lng,\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { centerAroundCurrentLocation } = this.props;\n\n    if (centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((pos) => {\n          const {\n            coords: {\n              latitude,\n              longitude,\n            } = {},\n          } = pos;\n\n          this.setState({\n            currentLocation: {\n              lat: latitude,\n              lng: longitude,\n            },\n          });\n        });\n      }\n\n      this.loadMap();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { google } = this.props;\n\n    if (prevProps.google !== google) {\n      this.loadMap();\n    }\n\n    const { currentLocation } = this.state;\n    if (prevState.currentLocation !== currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  loadMap = () => {\n    const { google } = this.props;\n    if (this.props && google) {\n      const {\n        google: { maps } = {},\n        zoom,\n      } = this.props;\n\n      const mapRef = this.refs.map;\n\n      const node = ReactDOM.findDOMNode(mapRef);\n\n      const {\n        currentLocation: { lat, lng } = {},\n      } = this.state;\n\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = {\n        center,\n        zoom,\n      };\n\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap = () => {\n    const { map } = this;\n    const {\n      currentLocation: {\n        lat,\n        lng,\n      } = {},\n    } = this.state;\n\n    const {\n      google: {\n        maps,\n      } = {},\n    } = this.props;\n\n    if (map) {\n      const center = new maps.LatLng(lat, lng);\n      map.panTo(center);\n    }\n  }\n\n  renderChildren = () => {\n    const { children, google } = this.props;\n\n    const { currentLocation } = this.state;\n\n    if (children) {\n      return React.Children.map(children, (c) => {\n        if (c) {\n          return React.cloneElement(c, {\n            map: this.map,\n            google,\n            mapCenter: currentLocation,\n          });\n        }\n        return c;\n      });\n    }\n    return children;\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={mapStyles.map} ref=\"map\">\n          Loading map...\n        </div>\n        { this.renderChildren() }\n      </div>\n    );\n  }\n}\n\nCurrentLocation.defaultProps = {\n  zoom: 14,\n  initialCenter: {\n    lat: 52.379189,\n    lng: 4.899431,\n  },\n  centerAroundCurrentLocation: false,\n  visible: true,\n};\n","// @flow\n\nimport React from 'react';\nimport {\n  GoogleApiWrapper, InfoWindow, Marker,\n} from 'google-maps-react';\n\nimport { googleMapAPI } from '../../assets/keys';\n\nimport CurrentLocation from './CurrentLocation';\n\ntype Props = {\n  google: any,\n};\n\ntype State = {\n  showInfoWindow: Boolean,\n  activeMarker: object,\n  selectedPlace: object,\n};\n\nclass MapContainer extends React.Component<Props, State> {\n  constructor() {\n    super();\n\n    this.state = {\n      showInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n    };\n  }\n\n  onMarkerClick = (props, marker) => this.setState({\n    showInfoWindow: true,\n    activeMarker: marker,\n    selectedPlace: props,\n  });\n\n  onClose = () => {\n    const { showInfoWindow } = this.state;\n\n    if (showInfoWindow) {\n      this.setState({\n        showInfoWindow: false,\n        activeMarker: null,\n      });\n    }\n  }\n\n  render() {\n    const { google } = this.props;\n    const { activeMarker, showInfoWindow, selectedPlace: { name } } = this.state;\n    return (\n      <CurrentLocation\n        google={google}\n        centerAroundCurrentLocation\n      >\n        <Marker\n          onClick={this.onMarkerClick}\n          name=\"Current location\"\n        />\n        <InfoWindow\n          marker={activeMarker}\n          visible={showInfoWindow}\n          onClose={this.onClose}\n        >\n          <div>\n            <h4>{name}</h4>\n          </div>\n        </InfoWindow>\n      </CurrentLocation>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: googleMapAPI,\n})(MapContainer);\n","// @flow\n\nimport React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport MapContainer from './containers/MapContainer';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n\n  #root {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    & > div {\n      margin: 1rem;\n      position: relative;\n      height: calc(100% - 2rem);\n      width: calc(100% - 2rem);\n    }\n  }\n`;\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n    <MapContainer />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}